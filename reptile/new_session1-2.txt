>> 大卫:欢迎回到CS50课程 也欢迎你们正式登记加入我们 这是第一周最后一课 登记加入我们的人数在这里 并且我们觉得我们能分享一些统计资料 我们在这次课程中也喜欢这么做 作为计算机科学家 我们要收集很多数据 我不想用最初你们想到的图表形式 而是通过CS50的程序风格来展示这些数据 我写了一个叫做"图表"的小程序 基于我在程序中硬编码的一些数据 向我们显示在过去几年中我们课程的人数 在这里你们没看到我所看到的 因为我还么有点击这个按钮 但是现在你们的确看到了 我设计了一个终端窗口 所以我在网站cloud CS50 net植入了一个叫做"SSH'd"的东西 我已经通过我的电脑连接到了课程的中心服务器 在我的笔记本电脑上  通过键入" /chart" 我将要运行一个被描写成 "ASCII码艺术"的小程序 在一个这样的终端窗口中你们都可以做到-- 过去几年中我们的人数 所以我们有2007年  2008年  2009年和"bang(感叹)"-- 这就是你们的人数 我们真的非常高兴  因为有你们参加了 这个学期的这个课程 匆匆扫一眼过去  的确好像 今天大约有225个人还在睡觉 不过那也挺好 这将是我们周五最后一个演讲 以后会回到周一 和周三上课 不过这的确让人非常满意了 对于我们教员来说 你们也认识到了  因为我们 在过去几年中作出了共同的努力 来影响这个校园的学生们 但是某些学生可能认为这并不是一个探索性的领域 而只是学期中的一个课程而已 或者只是一门主修或选修课程 所以我对你们承诺  也是所有教员的承诺: 你们绝对能够通过这门课程 并且在课程中度过一个愉快的时光 我给你们分享另外几个有趣的事实-- 在下周  一旦我们看到你们的习题集上是 "零个意见书"  如果你们还没有填写那个习题集的话 你们可以问一些人数统计方面的问题 或一些古怪的问题  那样我们就能对学生有个初步的了解 刚才我们在这个课程中作了一个分类 从往年数据上可以看出 上这个课程的大都是大学二年级的学生 可能跟当时的我一样  开始认识到我们终于有时间 来探究我们兴趣以外的事情 不过这是个相当不错的分类 如果你觉得你是这门课程中的 唯一的一个毕业班的学生:那你们错了 这里有大约一百个毕业班的学生  大约一百个大三的学生 一两百个大二的学生 还有大约一百个大一的新生 所以这是个相当不错的人数统计 在这里我们也有来自 设计学院 艺术与科学学院的研究生 这里有90个来自哈佛开放学院的学生 他们正在通过远程教育来学习这门课程 所以参加2010年CS50课程的团体是很庞大的 刚才你们看到的图片显示的是 2009年的数据 我们非常高兴的说  在CS50课程上我们虽然没有50%的女生 但现在已经达到了38% 这是21年来最高的比例 欢迎你们加入CS50课程  女士们 我们上次讲到了查看一些代码 并且给你们带来这下面的习题 所以在接下来的一周  我们将考虑支撑结构 我们不会留给大家一些知识片段-- 所以这周末或下周一开始讨论这方面的内容 根据这次的登记信息  我们将 对之前我们记住的时间表进行修改 我们会通过邮件通知大家  我们有你们 正式哈佛邮箱地址的存档-- 在接下来几天内我们会给大家发邮件 根据到大家的方便程度等  来对时间表进行正式地划分安排 但对于这一周  我们已经有了一个合适的支撑结构 我们有一个叫做"超级时间表"的东西 这对于各种方便程度的学生们来说都是愿意接受的 我们有三门不同的课程  分别在这周天 周一和周二开讲 请核对一下"时间表"下面的网站中的 时间和地点 其中一门课程也会被拍成录像 所以你们万一没有时间也不用担心 那个视频在周二会放到网上去 直到周五过期  这其中还是有充裕的时间的 我们这周天开始"代码走查" 这个会由研究生助教带领大家 什么叫做"走查"  然后这是一种 编程词库 "代码走查"的概念是单独或者和别人一起 通过查看或讨论学习你们的代码 的一个过程 我们通过CS50课程的代码走查来达到解决 每周习题集的目的 大家要以所谓的标准版为目标 我希望大部分同学会这么做 黑客版--我们不会提供走查的细节 因为我们假设大家都准备好了 独立地投入到PDF中 但对于大多数学生来说  知道这个资源是存在的 我觉得这会有很大的益处的 通过最低限度地阅读PDF文档 大家会收获很多经验 这的确是一个机会 特别对于那些不怎么舒适的  这是通过 特殊途径开始的好机会 所以你们不要拿起一篇上面一大堆的希腊语文档 或者对你来说那像是希腊语  然后想知道: "我该从哪里开始?" 我的意思是  我们会带着你们开始的 这就是为那些每周剩余的习题集 而打好基础的 这周日晚上7:00  核对下"习题集"下面的 网站中的地址 好的 今天我们将要写一些程序  并且让你们 在接下来的一周写你们自己的程序  今天晚上七点 习题集1会发布在网站上 所以如何来写一个程序呢 这分为三个步骤 你先打开那个"文本编辑器" 就是我们周三用过的叫做Nano的编辑器 这个跟写字板和记事本差不多-- 非常简单的  只是通过一种有用的方法而进行精简了的 所以你们可以把注意力集中在编写代码上 而不需要学习一些新的界面操作 我们需要记忆的 用的比较多的命令有: CTRL+X是用来保存退出的  CTRL+O是用来保存的 你们可以在这里和网上一些教材上 看到一些其他的快捷键 那样会节约我们很多时间 如果你们有谁想使用 更高级点的文本编辑器的话  我们可以给你们 一些指导:像Vim   或者Vi   Emacs编辑器 还有一些其他的客户端编辑软件 我们也授权给 你们使用 所有的一切将会到来 不过一旦你们写了一个"hello world"程序 并且把它保存为hello c文件后退出 然后你们运行编译器  在这里我们使用叫做"GCC"的编译器-- 这是全球最流行的-- 然后你们可以通过一些命令来运行这个编译器 这些命令行参数可以 影响这个程序的行为 所以这个命令  在这里的第二个-- 你们谁能快速地把它翻译成 英语来说明这是干什么的吗? 请说? >>运行程序【无法辨认的声音】 然后把它保存为"hello"文件-- >>大卫:好的  不错 差不多是的 我再补充一点 GCC正在编译我们刚才写的代码 在这个文件中-- 这个--哦  没错 好的  我先把这个改正过来再来补充吧 我们继续 这个GCC将编译我们刚才在hello c文件中的 源代码 我们不希望获得一个默认的很挫的名字"a out" 我先用这个命令"-o"来输出  然后文件名"hello" 它实际上存储的是"1"和"0" 存储在一个叫做"hello"的比较贴切的名字的文件中 而不是叫做"a out"的一个文件 现在有些人可能会问: 为什么我在用"cs50"结尾时  又在它之前 加了个"-l"命令 >> 那是告诉编译器我们想要在程序库中 使用一些当前的编译后的代码 >> 大卫:嗯  很好 所以那是一个标记  用来告诉编译器我想使用 或连接我自己的程序代码到一个叫做CS50的系统中的程序 可能其他人在那个系统写了这些程序 我们粗略地谈谈或剖析一下三两个其他的命令: 如果你们想用数学程序库  可以加上"-lm" 在那里我们有sin cos和圆周率和其他的函数 你们以后可能需要用到 但我还需要指出的是 我们粗略讲解一下  这里有一个"-lncurses"命令 那是一个简单的图像程序库 它在周三末尾做了个时髦的东西 还有些很多其他的命令 但现在如果你删除"-lcs50" 你们会得到一些提示--一些错误信息-- 像"未定义的符号"  这可以为你提过线索 "这个没有被定义  我没有告诉编译器 把想把这个与"1"和"0"建立连接 " 那最后  这三个命令式做什么的呢? >> 运行程序 >> 大卫:运行程序 " /hello"是用来运行程序的  我们经常看到的 如果你省略--作为一点提醒--那个" /"呢? >> 会发生错误 >> 大卫:会出现一个错误信息像"没找到文件" 或"没找到命令" 那是因为hello c是我所写的东西-- 而不是从哪里下载或购买 并通过双击安装的程序 --因为那是我写的程序 在我当前目录下编译的 我们不得不对计算机强调 它是在这个地方的 " "表示的是我当前的工作目录 那个我当前所在的文件中 好的  让我们来写点比"hello world" 更有意思点的程序吧 从你们周三打印出来的资料来看  如果你们手上有的话 你们会看到有个叫做的"math1 c"的文件 如果你们没有资料 那些程序还是比较短的  所以你们应该可以很轻松地 来看这些程序  但是那个PDF文件 和实际的源代码都可以到网上找到 相关的资料 所以根据初步的印象 如果你们运行这个程序  它会做什么? 啊? >> 它会做加法  像x加y-- >> 大卫:嗯  好的 它把x加上y  再把结果存到z中 但是如果有人 想要做的有点不合常理点呢 那这个程序会做什么? >> 【无法辨认的声音】 >> 大卫:什么都不做  对不? 实际上  最终它什么都不会做 因为我在演算这个算术 它会在后台运行一些的操作 这对我们来说是有用 结果不是那样的  但这的确有个事实 我们有些基本的运算法则和等号和 其他一些东西  用来为我们一些 更多有用的目的而服务的 让我们快速地看看它到底做了些什么 事实上  其中一个TFs能不能找到那个激光笔? 哦  它在这里 这里的这条线声明了一个变量 一个叫做"x"的存储空间  它的类型是"int" 意思是里面存储的是整数型的数据 那个等号其实是个"赋值运算符" 这样我们还要引入了一个新的操作符 我们将看到这里不仅有一个等号的操作 还有双等号 等下我们会明白它的意思  这只是 因为他们有着不同的含义 通常在这个"C"语言中  像其他的语言一样 几乎所有的你们的代码行都要以分号结束 但不是所有的 只是大部分的 我们将看到他们的区别 恰当的例子:这里没有分号 这里也没有分号  这里也没有 实际上  根据经验  你们回忆一下在Scratch中 任何时候你们写一条语句-- 处理一些操作的一行代码-- 你们通常需要在那里加个分号 不久后你们就会习惯这个语法 然后我在第二行做了同样的事情 我声明了"y" 然后我声明了一个叫做"z"的变量 把这两个数字加起来  把他们的总数存起来 但最终这个程序都不会做什么有效地事情 因为我没有把答案打印出来 我没有保存那个答案 我没有对那个答案做相应的操作 所以当我运行这个程序 没有什么会发生 我们接着通过键入"gcc math1 c"来编译这个文件 由于时间的原因  我不会总是 去改变这个文件名字  至少现在不会 它编译成功了 产生一个叫做"a out"的程序 我运行它  回车  但那里什么也没出现 让我们来做点更有趣点的 看看这个文件的第二个版本 顺便作为参考 为了避免我们可能忘记一些代码的意思 我通常会用一两个简单的句子 在上面作出注释 那样会提醒我们这个程序是干嘛的 这里有个稍微有趣点的句子 现在在句子中可以看出  这行代码做了什么? >> 打印答案 >> 大卫:打印答案  对吗? 所以这有少量的修改 我们之前遇到过这个语法 上次我们通常用"printf" 来打印一个静态的字符串  像硬编码的字符串"David" 这只是个例子 但是请记住我们的确介绍过这一个函数 一个你们能使用的功能--像用户询问一些文本信息 把它拿回来  然后把它放到一个可变的格式字符串中  因为 printf是美妙的--这也是这个"f"蕴含的 我可以在双引号中嵌入特殊的字符串 像"%d"是用来打印数字  "%s"用来打印字符串 还有一些其他的符号  我们以后会接触到 这其中还有一个逗号分开的有值的占位符 我把它放到了引号之后 这是一个很有用的方法  如果你之前不是很了解 在句子中要加入什么  但是这个方法可以 动态地创建字符串 短语 句子 那个是有用的  因为我不需要预先知道 那个答案将会变成什么 或者那个字符串将变成什么的时候 所以我强调这点  我可以运行"gcc math2 c" 但是我不是很喜欢a out这个默认的名字 想取消它  那么这里有个叫做"make"的命令 这个命令现在没有很大的改进 只是把用来更改名字用的 等下我们将体会到  当我们要键入的命令是 很长 很复杂的时候 要键入它们就变得比较麻烦 并且也很难记忆 所以make通常使这个过程自动化 唯一的不同在于我只要键入 "math2"而不用键入"make math2 c" 假设我在一个叫做"make math2 c"的文件里 然后去找它 现在请注意这个命令--这里没有错误信息-- make是向我们显示了这些命令 它根据我们的利益而执行的 实际上  一旦我们开始写一些更复杂的程序时 你们可能要键入那样一些长的 讨厌的命令 来编译跟高级的程序 所以我们刚学习了怎样简化 操作的一个方法 事实上  作为一个帮助程序  请注意 它为我自动分类:这个是什么东西? >> 大卫:是的  这是CS50程序库 所以万一我碰巧使用了CS50程序库 我们用这种方法配置了联网 那样我们就有使用它的权利了 所以那是挺有用的 总是能够让你能够使用数学程序库 那也是有用的 所以你不一定要把它记住 这里还有一些其他的标记 我们不会花很多时间在这些上 但是你们刚才被他们忽悠了 "-ggdb"是用来使能"调试标志"功能 的一个标记 接下来几周我们将看到这个命令 但是  在接下来的一两周内  当你们写程序的时候 或至少在第一次写的时候  通常如果你在调试程序 就像你们可能已经试着调试过Scratch 你们或许是通过查看你们的代码 来推断你们的程序 从头到尾  可能还需要别人的帮忙-- 但是你的朋友也将要打印输出 所以不要低估下一两周的重要性 虽然我们只将"printf"语句暂时地植入到 我们的代码中  只是用来打印一些 变量或表达式的值 所以你们提醒一下自己 当你们能够确定你们的代码运行正常的话  你们可以把这个"printf" 语句删除掉 "printf"本身在早期就是有用的调试工具 这意味着在不久后  我们将使用一些更高级的 调试方法 对于个细节 在一段时间内 -std=C99 这个叫做 C的比较突出的编程语言  并且它还在改进 在1999年  他们加入了一些新的功能 使编程变得舒服很多 他们废除了一些令人头疼的东西 所以我们在使用的C语言的C99版本 这对今天来说是没多大用处的 只是告诉我们使用的是那个版本而已 如果你来自一个先前的背景 如果你们没有使用这个版本标志的话  在一个不同的系统中 你的代码可能运行地不太一样 现在教学上用的这些东西  -W   -W   -W 这些本质上说明GCC是很挑剔的 这说明为什么GCC尽可能地经常地提醒你 即使是一些最小的事情  来要求你能够 编写出最好的 最稳定的 最正确的代码 所以如果你省略了想这样的标志 有时你的代码能编译通过 但是当你在实际中用make或 所谓的标志来编译它  你会被告知存在 大批的错误  即使你认为你的代码 是非常正确的 我们以后也会演示这些例子 我得到了答案3  但是它可能 误解了我的意图 为什么这个"3"显示在我的Malan用户名前面 >> 【无法辨认的声音】 >> 大卫:是的  我没有加入"反斜杠 n" 所以如果我打开这个文件  请注意我这里有"%d" 但没有"反斜杠n"-- 反斜杠n是用来使光标移到下一行的 就是这样 只是一些很小的细节 好的  让我们开始学习一个稍微 更有趣点的程序 让我们进入这个程序的第三版 开始用这些概念来写点东西 现在实际上我在做一些算术  但是我们 将会被一些细微的差别所阻塞 这个程序跟习题集1中的 一部分比较相似  至少在习题1中 这里我在做什么? 哦!--下次我把这个字体颜色改成蓝色的-- 我先告诉编译器--我需要使用 标准输入输出库 因为printf在那个库里面申明的 我指明"这里是我的主函数 这里是我的程序内容 " 然后这里  这只是一个子程序 在那里面我硬编码了表达式"17除以13" 我把这个答案存储在一个float类型的 叫做"answer"的变量中 由于  float就是一个浮点数值 所以  不同于int  这个类型的数字 可以有小数位 这样才有意义  因为这个结果将不会是 一个整数  对吗? 17除以3(13)大概是多少呢--1点几 所以是1点几 几 几  是不? 所以这个到底有什么作用呢? 为什么这个值得大家关注呢? 嗯  我们先编译它 这是math3  所以键入"make math3"  回车 我的程序或这台电脑是不是坏了? 为什么呢? 这是那个源代码 >> 【无法辨认的声音】 >> 大卫:是的 所以那只是好的直觉 我们上次看到  这里是剩下的操作 我的确希望有一个方法来修正这个错误  但是看起来 好像那个除法操作  那个斜杠是除法 但是--对于很多编程语言来说 是挺奇怪的--因为17是一个整数 13也是一个整数  为什么我这样说? 这里没有浮点数值  它只是一个整型数字 当你把一个整型数除以一个整型数时 无论如何答案将会是一个整型数 或别的数值  当你用一个整型数除以一个整型数 在那个变量的返回值里  只有 存储一个整型数的空间 所以发生了什么呢? 所有小数点后面的数值都被砍掉了 它不会四舍五入 可能直接舍掉了 但是它不会像你想象的那样恰当地四舍五入的 它直接把小数点后面的数值丢弃掉了  因为 凭直觉  那些整型数和结果应该是一个浮点数据 但是我需要一个更精确的数值 说点题外话  结果你可以用printf来打印其他的格式 这是非常有用的 甚至是为了ASCII艺术的目的 这次我不只是讲"%f" 我要讲的是 % --什么呢--% 2f 这个是什么意思呢? 嗯  你们可以推断一下 如果刚才我回到那段代码中去 我们回到math3  请注意在小数点后面 会打印几位数呢--两位? 所以我们用printf也可以控制这种 打印结果的美观性 在习题集中如果你们遇到相关的问题 我们会提供适当的文档资料 让我们来修正这个程序 这个第三个版本的 让我们继续来修正这个问题 好的  直观地看 如果那个问题的原因是因为整型数除以整型数的话 无疑有个解决方案是:"不要那样做"  是吗? 我们用一个整型数除以浮点数 所以我可以通过改变其中一个 整型数为浮点数 说点题外话  我承认这是一个完全无用的程序 跟我们之前写的两个程序一样 我们为什么需要写个程序来解决这个数学运算呢? 我们可以用一个计算器或 其他的运算工具来计算那个结果 但是这里我在做一个同样的计算 所以现在我键入"make math4"来编译第四个版本 这里可能有更多的小数位 但因为我对结果设定了格式 我们只看到两位 这个可能有用  当你想把它的格式 变得美观一点的时候 让我们再来看看第五个也是最后一个版本 结果在包括C语言的很多语言当中 你作为一个程序员懂得了一些计算机的工作方式 和语言的处理方式 可以更精确地控制运用它 你不需要这样来操作  比如 手动地加入小数点来修正这个错误 你可以控制编译器处理 不同类型的数据 至少我们凭直觉 它应该是可能的 但因为这样的题外话  (浮点数) 因为那样的题外话-- 还是没有做完这个数学题 这是一个编程语言的东西-- 那是一个计算操作 所以这里的意思是编译器将 做"计算"  譬如13这样一个浮点数 --到另一个浮点数-- 然后为我们处理除法 以便严格地修正这个问题 为什么这是有用的呢? 好  我们等下讲讲密码学 密码包含不规则的信息 它把我们正常人能读懂的东西转化为 希望坏人读不懂的东西 但是自从上周我们已经知道 计算机最终是用数字来表示所有的 信息  如果它们要描绘 在内存中的字母 它们该怎么做  用什么方式呢? 它们想描绘字母而不只是数字 >> 【无法辨认的声音】 >> 大卫:是这样的  不是二进制本身  而是用ASCII码  对吗? 你只需要提出一个使之与数字对应的协定 那样计算机就可以方便地存储它们 你必须提出一个 数字与字母对应的协定 我们目前看到的这个东西叫做"ASCII"码 现在ASCII码包含字符了 我们知道从周三起--简单说下-- 我们有个叫做"char"或"char"(读法不同) 看你们怎么读它了  那代表一个单一的字符 但那里会有个整型数与之对应 如果我们知道65是个整型数  对应的是 大写字母"A"  我们已经口头地说明 我们可以把数字转换为字符  字符转化为数字 所以这里就是我们将要学习的一种语法 如果你要把一个像65这样的数字转换为字母A 你只需要告诉计算机"把那个int型数据转换成char型处理" 如果你想做相反的转换  你就告诉计算机 "把那个char型数据转换成int型处理" 所以这是一个函数引导 现在为了这些数据量 让我们先结束一个未解决的问题 这里有个小程序  其中里面有个 备忘单对我是有点用的 我声明了四个变量:"c"是char型的 "d"是double型的  "f"是float型的 "i"是int型的 这是我们到现在为止学习了的四个数据类型 我不太记得类中的这些类型 是多大的  嗯 结果是--这个在以后比现在 可能是更有用的--不过C语言中有个sizeof的操作符 其中括号里有一个参数 它会告诉我们  要存储一个类型的数据 需要占用多大空间 所以我将要逐行地打印出一个char类型占了几个字节 一个double类型要占了几个字节  还有float和int类型 所以这大部分都是复制粘贴 其中唯一的区别是数据类型的名字 和我使用的变量名字 让我们继续编译"make sizeof" 接着运行"run sizeof" 我们要确认一些几天前 我们讲过的一些东西 所以char类型占了1个字节  --那是多少位? >> 8位 >> 大卫:是8位 现在那是相当容易了 float类型和int类型都占四个字节 那一个int型的呢 由于它占4个字节  那是32位 所以它可以表示的最大的数值是多少呢 大概是多少?用32位表示? >> 40亿 >> 大卫:是40亿 如果你想也用来表示负数呢? 你不得不拿出一部分来表示 所以大概是负20亿到正20亿 这是相关的 所以20亿  40亿--这都是很大的数值 但是世界上有很多"数十亿的东西"  对不? 有数十亿的原子 现在网页可能都有数十亿 如果一台计算机只能够支持20亿 或者40亿  那我们该怎么办? 这确实是个问题 这个跟10年前发生的事情有点不一样 那个所谓的"Y2K"问题 本质上的结果是 程序员没有真实地预见和认识到 "可能我们没必要用到这些位数或数字 来表示一年  但是最终这个将会 是个问题 公平起见  那个问题有时会发生 因为实际上  很多企业在这么多年里运行了 比程序员多得多的代码 虽然他们将运行它  但那个构想还是一样的 所以这里有一个解决方案: 如果你需要比float类型允许的更高精度  小数点后更多位数 那你该用什么取代它? >> double类型 >> 大卫:double类型 double类型占64位 现在这个可以表示的数值是相当大的了 这是2的64次方  是相当大的数字了 但在当今的社会上  我们将讨论一点安全方面的知识 贯穿整个课程  密码学-- 加密一些像信用卡信息 银行账号之类的东西--你不能用32位 你也不能用64位 你通常要使用1024位  4048位 我的意思是它们是非常 非常巨大的 数字  用来为保护我们的数据 但是它终归是各种各样的存储的基本要素 【电话响了】 对不起  我接个电话 没响了 好的 有什么问题吗? 一些比较无趣的数字 一些关于类型的大小 在我们现在进行试验之前 你们对这其中的语法或概念有什么问题吗? 请说? >> 有没有能表示1024位大小的数据类型或-- >> 大卫:好问题 有这样一个数据类型吗? 有一个像int char double这样的关键字 用来表示一个1024位大小的数值呢? 简单回答:没有  至少在C语言里是没有的 你可以 在C语言或其他语言中创建这样一个结构体 但是立即可以用的 我们通常只有这些所谓的"基本数据类型" 事实上  int数据类型还是没什么用--40亿-- 我们还是没有解决那个问题 所以我们能用什么数据类型来表示 比int类型更多位数的数呢 谁知道叫做什么吗? 你们有可能看到过long  那个在一些服务器上是正确的 但是非常 非常普遍的是  那个叫做"long"的数据类型 只占有4个字节 所以事实上  如果你需要一个超级长的数字-- 让我们继续重新讨论这个问题-- 你可以声明long 让我们来试一下  long l 然后我在这里复制粘贴一下 这里long的大小实际上是l的大小 所以让我退出 那个程序 重新编译 这里有个小技巧--此外  我们许诺指出行业中的 一些小技巧-- 如果我知道我想执行我写入的上一个命令 是以m开头的  !m会明白那个命令是什么 然后为我恢复上次操作 所以我不需要明白它  或者你可以回到 那个终端窗口 所以现在我在敲右箭头(↑)键 先在我敲下箭头(↓)键 所以我们可以滚回到我们(敲过的命令)的历史记录 这个可以节约我们的时间 我们继续然后返回sizeof  敲Enter键 这个是相当没用的  对不? long类型  至少在这个Linux系统的主机上 他们是相同的大小 所以结果是  那个时候无论是谁想出的这个  要么是可笑的 要么是没创造性的 如果你们真的需要一个很长的数值 有一个叫做"long long"的类型 要么叫做ll 让我再做个复制粘贴 所以我能打印它的大小 如果我重新编译-- 别介意我操作地非常快 我在做和之前一样的事情-- 敲Enter键  现在我们有8个字节 所以8(字节)是个相当巨大的数字了 这个也蛮有用的 到这个学期的期末 我们会讨论数据库的设计 你们其中的一两个习题集会用到一个 叫做MySQL的数据库  那个是非常流行的数据库-- Facebook使用了它  各种各样的公司也使用它 当你开始存储很多很多的数据的时候 你的确需要这个管理很多数据的功能 幸亏有64位的数值  我们才能做到如此 但是我们的空间真的会用完 即使有这样的数据类型 所以我希望我们不要两次犯同一个错误 好的  这里有一个可能常见的 但可能未留下深刻印象的公式 这个东西描绘的是什么呢? >> 怎样从华氏温度获得摄氏温度 >> 大卫:是的 所以这个是怎么从华氏温度获得摄氏温度 如果你知道一个华氏温度的温度值 你们输出摄氏温度 这就有几分像经典的计算机科学 101-类型问题 这是美好的  虽然  只有在那个里面它才会给我们一个机会 来填充那个空白表格 所以这里是一个空白表格 如果你有一张废弃的纸张 假如你已经开始了以下的问题 请注意我做了一个改变 在周三我在那个网站上尽可能地 简化代码的时候  我有点偷懒 但结果是我们将看到 函数绝对是有参数的  对不对? printf的括号里是有参数的 但是  main函数  至少现在是没有参数的 所以在周三  我只加入了左括号  右括号 但是这的确是正确的方法来指明 这个函数是没有参数 实际上是写了这个关键字"void" 所以我现在将开始养成那个习惯 虽然这是一个有点分散注意力的细节 它只是与编译器 拥有的期望是并存的 让我用这个来挑战你们: 在这些花括号里面  我通过双斜杠写入了一个注释 --一条"注释"在这里不会被编译 它只是用来我们阅读的 程序员通常写TODO不使用空格 像这样的大写意思是"这里我需要做些事情" 继续和你旁边的人执行程序 取来自用户的整数F作为输入 然后打印出与之等价的摄氏温度的答案 所以输入是一个int类型的F  在你的屏幕上 或你们的纸上打印出C的数值 可能你们需要两行或者三行的代码 但是最终的目标需要你自己独自尝试 和你身边的人比较30到60秒钟 看看是否在我揭露答案之前  我们不能使每个人 得到一个完全相同的页面 【音乐】 >> 大卫:我们再放一次音乐 【音乐】 >> 大卫:叫做什么? >> 【听不见的声音】 >> 大卫:好的 如果你还没有做好  那就看看你旁边的人 如果你不认识他们就跟他们打个招呼 让我们看看你们 解决了多少迷惑 这里嵌入了两三个提示 有的同学可能想知道: "我们怎么通过用户获得那个int数值" 好的  请记住从周三开始我们介绍了CS50的函数库 我们刚开始使用了它  里面有很多的 有用的函数  像GetInt  GetString   GetDouble GetFloat   GetLongLong 所以  那些名字暗示  你可以挑选这些 没有参数的函数  然后你可以通过它的名字 获取他们的数据类型 所以我可以--这里的提示看起来好像 你可能的确想使用CS50的函数库 因为我包含了所谓的头文件 Stdio h  同时  我事先包含它  这是为什么? >> 【听不见的】 >> 大卫:所以你需要这个库来使用printf  对不对 如果你的确想打印出那个值 而不是把它丢弃掉 所以这是个可以插入字符的括号 让我继续在括号里加上void 但是我们将在下周精确地解释为什么 什么时候我们那样做 你们怎么认为? 在这个末端  printf函数? 所以你们可能选择了一个不同的语句 或其它的东西  但是那挺好的 华氏温度可能用一个间隔来 使其更加美观和有趣 然后你声明一个float类型f  再赋值-- 让我向上为你们回滚到-- 给出了GetFloat的返回值 对还是不对? 至少大部分人有一些东西沿着那些代码行 没事的 好的 那不是个问题 实际上这个是在干吗? 好的  记住那个GetFloat是一个函数 它被定义在CS50的函数库中 它的唯一目的是 向用户询问一个浮点数的值  然后返回它 那个放在变量中的值是取决于我所赋的值 把它想象成一个黑盒子 我说:"给我一个浮点数" 它就给我一个浮点数 我现在需要把这个浮点数放在哪个地方  然后我把它放在 一个叫做f的变量里 你也可以给这个变量取其它的你喜欢的名字 现在我需要做一个数学运算 这里我声明了一个变量C 然后我把那个幻灯片上的公式 用键盘上的字符翻译成了 浮点数值 但是这里有一个可能性-- 这就是你需要把 一些线索拼凑在一起-- 我这里所做的是很有趣的  如果我不这样做 我可能已经犯了个数学错误 >> 【无法辨认的声音】 >> 大卫:让我们仔细检查一下这里 我认为这里所有人都好像知道了--是吗? >> 你把它改为99 0(9 0) 那样我的数学实际上就是浮点数的了 包括实数  不只是整数 如果我使它保持是9  我可能得到 哪个答案? >> 零 >> 大卫:对的  我将得到零 稍微看一看:如果这是9  5除以9会得到 0点几  如果你用两个整型数 你舍去小数  这就是当你们 用整型数使用这个操作的所发生的事情 我将得到数值0乘以任何一个数字 因此  几乎这总是错误的 对不? >> 但是f不是已经是一个浮点数了吗? 所以为什么这个不是【无法辨认的声音】? >> 大卫:极好的问题 所以f不是已经是个浮点数了吗? 是那样的  但是特别地  因为我这里加上了括号 然后它乘以左边的那个除法的结果" 正像是在小学你做除法和乘法的时候 你毫不含糊地从左到右 按顺序做运算 是的  f是一个浮点数  但是那个解决方案太迟了 我们应该在次之前把问题解决 >> 我如何调整那个括号? 我可以把它放前面吗? >> 大卫:是的  你可以 如果你那样做  如果我们把 (f-32)放前面 那将会给我们一个浮点数答案 因为f是浮点数 那是浮点数乘以整型数 那是可以的 那将会给我们一个浮点数 然后我除以一个整型数-- 那是可以的因为现在为止  我们在之前已经 引入了一个浮点数  你是对的 这个问题只会发生在 当你用一个整型数除以一个整型数的时候 并且那个操作是在其它操作之前的 你将得到一个错误答案 请说? >> 这是不是只对除法起作用? 如果你只是减去32  这是没有关系的-- >> 大卫:F减去32? 没关系  那没有问题 这里实际上是乘法和 除法引起了那个问题 请说? >> 如果不用9 0  你可以在把"float"放到 括号里吗? >> 大卫:可以 绝对的 所以我推荐可选择的应用中的一个好的 我本可以这样做 我之所以没有这样做是因为 现在我看着这个  它是我有点迷惑了 甚至是对于某些已经写了一段时间程序的人来说 对我来说括号太多了 所以我找了其它的方法 你们也可以完全那样做 是吗? >> 好的  你上周讲了很多这个 你们为什么写代码? 因为你没有说你可以写像%f这样的? >> 大卫:%f--好问题 所以我们讨论了"printf"  这个函数的唯一目的 是把一些输入打印到 屏幕上 printf还支持"格式字符串" 他们只是占位符 但是这是个不同的环境 这里我的确需要告诉计算机  "给我一些字节内存 来存储一个值  那个值将是 浮点型的数值" >> 对于不是打印输出的 你需要写出代码吗? >> 大卫:在一个特定的时间  我将需要 声明float类型这样的变量 那样我就可以把它打印出来 像是格式化优点的插入值 所以这两个故事都涉及到浮点类型 但是只有那样我们才能真正地分配到内存 有其他的问题吗? 好的  让我们来运行它 看下这个底部  这个是相当随意的 但我选择把我的字符串格式化成这样: 所以在这个底部我打印输出% 1f 提醒一下  这是一个只打印出 小数点后一位的方法 然后我将打印大写字母F 使其比较美观的  等于另一个% 1f C 所以我滚动到右边  我应当看到一个逗号 在右引号的右边  然后这两个值是多少? >> 【无法辨认的声音】 >> 大卫:"f  c"因为我想告诉printf  "在那些占位符 和那个格式下打印这些值" 让我们继续来编译它 所以我将继续来编译f2c 这是我给这个程序取的名字 现在我将运行f2c 现在输入华氏温度-- 回车  确实等于100摄氏度 可以推测  如果我们反复地做这个 我们会得到类似的正确的答案 好的  有问题吗? 你说? >> 对于printf  你也对它使用printf吗? 你也可以用GetString【无法辨认的声音】? >> 大卫:好问题  简单回答:不行 所以你能够用GetString来打印答案吗? 不行  所以我们故意在CS50的函数库中 根据函数的作用来给他们命名 所以当你有一个叫做GetSting的函数 它的意思是从用户那获得一个字符串-- 提示用户输入一个字符串-- 然而printf的确是用来打印的 不是在纸上  而是在屏幕上 所以很大程度上函数的名字指明了 或暗示了它们的功能 好的 让我们继续来介绍其他几个功能 以便我们最终能开始写程序 那样可以打印图表或与用户交互 打游戏之类的 好的  大部分的这些东西 的确对应Scrtch来说是 非常类似的 结果在C语言中  你们完全可以表示出环境的概念 一个分支  一个三岔路口 这个语法看起来使人想起Scratch 那里有一个这种形状的程序块 但是你必须说明"if"后面跟着一个空格 跟着一个括号  一个你需要核对的布尔表达式 --还有更多的 花括号是C语言的一个方式 用来做一个像这样的程序块 所以你可以把代码写在里面 所以左花括号后面跟着 右花括号  这意味着花括号里面所有的代码 都应该是要被执行的 但只有当第一个条件是正确的 你们才可以在C语言中使用这些东西 所以如果你想做 --让我把这个弄得更简单点-- 如果你想把这些代码堆集在一起  在一个情况中 或在另一个情况中处理  你能够像这样把他们集在一起吗? 请注意  不像Scratch  在那里 你们其中某些人可能认识到它变得有点丑 你有一个"if else"然后这里又另一个 那里又有一个  代码就像这样开始跳转 跳转再跳转 它开始变得有点凌乱了 用C语言  你只要把代码排在这里的左边 因为只是文本 所以如果我们有第三个  我们可以像这样引进它 这样代码就排得漂亮多了 此外  如果你只有一行代码 需要执行  在Scratch 术语中叫做 一句代码 你就不需要使用花括号了 如果那个条件成立  你有两行或更多行的代码时需要执行时 你就需要花括号 但是现在  简单起见  你可以 养成每次都使用花括号的习惯 请说? >> 你说你在if和括号之间用了个空格 那有什么影响吗? >> 大卫:没有 好的  所以你捕捉到我 以教育目的用了个善意的谎言 所以那个问题是:我们在if和括号之间 需不需要空格呢? 从简单的技术上说是不需要的 作为一个格式风格问题  那是非常必要的 那样可读性更好 所以这是以个贯穿整个课程的话题 至此 人们大都是把注意力集中于正确性 观点上:你的代码是不是根据你的意愿 并按照你的要求来执行呢? 但是另外两个中心线  按照教学大纲我们将探究 课程中格外的一些细节 这些中心线是跟 我们评估你们的设计论文是一致的 换句话说  这个执行得怎么样? 你是不是复制粘贴50次 当你可以用一个循环来循环50次呢? 所以那是个好模式 坏设计的问题 还有第三个中心线叫做"设计风格" 那是一个主观的审美学的观念 所以你们将看到在教科书中  我写的程序中 研究生助教和课程辅导员写的代码中 有着不同的编程风格  比如-- 这是一个不错的权威的范例--很多人 特别是写C语言程序的人  把他们的花括号 放在第一行  直观上有人不太熟悉 为什么这个会更好? 因为这里没有一个固定的答案 但是为什么这个方法更好点呢? 你说? >> 它好像更【无法辨认的声音】 >> 大卫:是的  它更实用点  对不对? 这样可以少占有三行空间 当我开始写很多行代码的时候  你们懂的 这明显是有用的  当你可以在屏幕上看到更多的代码 而不用滚动屏幕 所以我要主张  作为在我生命中的实践经验 和教学的资格  真诚地说 我认为这个是更具有可读性的 而且这个对于Scratch来说是也是更有结构性的 但是请认识到  用这些决定 它将会有风格上的问题 所以你们将会被指出 在习题集1中  PDF是我们CS50课堂 编码风格指南 你将看到用绿色方式高亮显示的是编程的好的方法 你将看到用黄色方式高亮显示的是可以做的方法-- 只是保证你们在做这个 因为你们知道你们在干什么 并且你喜欢做这个的方式 像这样的红色的东西 出人意外地  我经常看到因为我们都没有教这个 但我们看到了这样的作业: 像这样缩进的不会帮助任何人 正如你们看到的上面红色的地方 你们可以做一些疯狂的事情  因为最终 那个计算机并不关心 编译器会忽略所有的叫做 "优美打印"--所有的这类缩进 所有的这些空格-- 只是为了我们的利益  也是你的 你的同事 教员的和其他人的利益 久而久之  你们将通过看和实践来学习到 这里通常有很好的方法 还行的方法 很烂的方法来编写代码 但是这是一个我们以后要练习的原则 为什么我们不开始休息5分钟呢? 好的 让我用这个素材写个真实的程序 在你们的打印输出中有几个文件 其中一个叫做condition1 c 我将 改变我的终端窗口 我将用Nano来打开condition1 c文件 实际上  我在用小技巧 我将用我自己专门的程序 那个会分类为我标出代码的颜色 但是那个思想是一样的 这是一个文本编辑器 让我们看看到底这个程序是做什么的 我把注释去掉了  那些双斜杠 右边的文字 所以这样你你们可以做一些思考 而不是阅读屏幕上的答案 你们的拷贝的注释 记录了代码做的所有事情 所以这里是我的代码 我先用printf 我想要一个整型数  一个冒号  和一个 使其更美观的空格 然后我声明了一个变量n  它是int型的 我用了一个复制操作符 一个等号向n中存储了什么? >> 那个整型数 >> 大卫:那个整型数 所以存储在n中的是GetInt 的返回值 现在我把GetInt去掉了  这是什么意思? 好的  因为最终我们将给你们看源代码 那个我为GetInt而写的代码 但是现在假设GetInt只是使光标闪烁 或者是不变的--它依赖于你的电脑 和操作系统之类的 假如是那样--现在想想 GetInt只是使光标闪烁或 等待用户来输入一个"整型数"然后敲回车键 所以获得一个int数是什么目的? 如果你用GetSring来代替它  同样的:闪烁光标 那个函数只是等待用户来 输入一个单词 一个句子什么的  然后敲回车 我们可以看到  如果你尝试打乱我们的函数 当想要一个int数时我们提供sting型  或者 当想要一个sting数时我们提供int型  你可能会被吼叫 然后用户不得不重新尝试 所以我们植入了一些错误校验  如果你愿意 在我们的执行代码里 现在这个故事的这里 我获得了一个变量n  我把它存储成int型的 我现在在干嘛呢? 好的  这是其中一个条件  这些分支 我们在Scratch中使用了他们 如果n比0大  我就决定来说: "你选择了一个整数  反斜杠n"  所以你把光标 放在下一行  另外如果n不小于0  我说: "你选择一个负数  反斜杠n" 请注意因为我在每个分支中只有一行代码 显然地我省略了什么? >> 【无法辨认的声音】 >> 大卫:花括号 所以我实际上不需要那个花括号 因为我只有一行代码 但是如果我的确有两行或更多的代码 我其实应该把花括号加上 为什么省略它们? 只是使代码更加紧凑点  像刚才那位绅士说的 用来空出一些空间来显示更多的内容 那可能是一个非常合理的决定 好的  这里有一个缺陷 机敏的人或数学家将认识到 这里将发生什么? >>【无法辨认的声音】 >> 大卫:对的 所以0不是一个正数  也不是负数 在这里我只是简单地 说明它实际上会是负数 好的  我们可以修复它  对不? 我们看到了这个Scratch的分支结构 我们看到刚才在幻灯片中  了解到  我们不需要 用一个else  也不只是用一个if  而是用一个else if 然后这里我们可以检查与0等价的情况了 在这里正像所承诺的那样  其他的操作-- 看起来有点怪异 但是因为"="已经被用来当赋值运算符了 用来把右边的一个值赋值给左边的变量 好的  我们必须提出另外一个 看起来符合人类思维习惯的符号 所以他们采用了"==" 所以这是相等操作符 然而那个单等号是一个赋值运算符 现在我们有三个条件--三岔路口-- 然后这个程序的确是正确的  至少我希望是 让我们继续输入"make condition2"  然后敲回车 好的  编译通过 现在注意正如所承诺的  这里我用的是苹果电脑 所以我的光标不会闪烁 但是光标在那里等我输入 什么都不会发生直到我输入东西 我们输:"David" 好的  显然那不是一个int数 我不用int数  正如预期的那样  它开始对我大叫 并且说"重试" 它将会令人作呕地反复如此处理 直到我给它一个int数或者当我认识到:"喔 我真的弄砸了这个程序 我不能给它所要的" 当你在写代码时  程序将 提醒这个问题  如果你不得不 关闭这个程序  你不需要关闭这个窗口 重启像那样的疯狂举动  通常你可以敲CTRL+C 它将会在这个地方终止那个程序 假使你陷入了尴尬的处境 不过让我们这次正确地来玩这个游戏 所以我想要一个整型数 1 2 3  回车 你选择了一个正数 你们选择了一个负数 运行很好 所以这个程序实际上好像 最终还是做了点有用的东西 现在让我们看一下我们还可以怎么处理它 好的  结果是如果你想要核对两个条件 你只关心其中一个是正确的 或另外一个是正确的 在现实世界中  你可能想说 如果你去电影院看R级电影  "你有18岁吗? 或者你跟随你的父母亲来的吗?" 所以你想要处理这个条件或这一个 你不想打破这些条件因为你想 让这些人进来或者那个家庭进来 不过怎么样  如果其中任何一个 条件成立  你可以进来或跟他们一起进来 在Scratch中  这个你用的程序块 照字面地想法来说"or"表示或者 在C语言中  是两个竖线 如果你从来没用过这些竖线  它们在 回车键的上面 你可能要按住Shift键或什么键 但他们是标准键 它是复纵线--之间没有空格 我最后将了解到  单一竖线的意思 是不同的 所以复纵线意思是  如果这两个条件之一-- 或者两个都--是成立的  那就继续 执行后面的代码 如果你想保证两个条件都成立 或者它们两个都必须为真值  才能执行一些代码 那就使用"&&" 这使我们想到了那个and的概念 在Scratch中  你们大概看到那个关键字 "and"在其中一个程序块中 让我们看看我们怎样使用它 这个有一个叫做nonswitch c的文件 在你们的打印资料里 让我们翻下来看看我们接下来可以做什么 我们的程序可以变得有点有趣 根据我们的输入做一些判断 所以在顶部  我像之前那样对同样的东西进行编码: "给我一个1到10的整数"  或者 "给我一个1到10的整数"-- 这次有点不同 然后我调用GetInt  它将 为我处理一些麻烦的用户 如果他们键入了不合法的字符  它将对他们叫喊 然后叫他们重试  最终我将 得到一个int数  它是存储在n中的 好的 如果我的确想要根据它的量级来判定这个数字 好的  现在我可以指明  "是否n大于等于1" 所以在你们的键盘上  在下面没有一个大于号且 下面是一个减号的键("≥") 即使你们可能在微软Word中有它 但那也不没有关系 在C和大部分的编程语言中  如果你需要表示大于等于 在">"号后边加上一个"=" 中间不要空格  那使我们联想到同样的想法 我们武断的判定它为 一个小的数字 否则如果n大于(等于)4  并且n小于(等于)6-- 小于等于10--我们叫它为"大数"-- 如果用户键入了0或者-10或20或其它的 让我们用一个广泛的else子句  只需要说 "你选了一个非法的数字" 所以在这里  现在代码变得更有趣了 但是它也显得有点臃肿 代码变得稍微有点长了 有没有其它的可选择的语法来实施这个想法呢? 在Scratch中你可能已经意识到 "我可以用这一段代码来 执行我的程序  不过这有点感觉到 我可以用这些代码段来代替"-- 那绝对是编程中的一个情况 即使今天乃至整个课程中 你们将了解到很多的结构  你将发现 这里有很多的方法来处理一些事情 这将引导你们做更好的设计 随着时间的推移  从两个不同的选择中 选择一个更好的 所以C语言支持叫做switch的东西 一个开关结构 这个东西是不错的  因为它不用"if"和"and and" 或者"or or"所有的这些 你可以用枚举来更清楚地表达它 虽然表面上它用了更多的空格 但程序的上半部分是一样的 "给我一个1到10的正数" 我得到一个整数并把它存储 到n中 switch语句的圆括号里可以是一个整数 或者一个字符或其他的基本类型 所以现在假使它是一个整数或字符 然后我们在花括号中要做的是 逐行地列举接下来我想要 应用的代码 所以这些代码到最后的实现上  功能是 完全相同的  nonswitch c 但是我想要再次强调一下 "在case 1"  那是当n等于1时 或者当case 2适用-- 当n等于2或者当n等于3  它将做什么? 我继续打印一个小数字 但是现在我需要用"break" Break是另一个关键字 你可能再Scratch中使用了类似的东西  可能是Stop 或者之类的东西 用来在一个循环或结构中中断我们正在做的东西 我需要中断  因为否则 switch的想法将会失败 一旦其中一个成立  它将会开始执行 那些代码直到你叫它们终止 现在在最下面  我们会看到一个default 分支 当它不在你列出的所有情况中 为了处理其他的情况  你可以用"default:" 这里我可以用break来终止这段代码  但是它是有点 不必要的  因为我已经在这个花括号的 底部了  就这样了 总之这里没有更多的代码需要执行了 哪一个更好呢? 坦白讲  这个看起来有点丑 你需要翻滚屏幕来看它 但是当你看是写程序时  特别是当我们 使用基于网络的东西  你想要 检查用户的输入-- 它是合法的吗?它是不是一个电子邮箱地址? 所有的这些场景-- 实际上它常常是有用的  当你用枚举结构列举它们 或者用它来快速地来说出它们 好的 嗯  我们在Scratch中看到了循环 现在让我们看看我们如何用它们来处理 那个登记人数的小图表 这是用for循环语句 在C和很多语言中 PHP和JavaScript对我们来说几乎看起来是一样的 在这个期末  你们可以用三个设计来实现 循环的思想:一个叫做for循环 我们即将要看到 一个是while循环 还一个叫做do while循环 本质上  Scratch有相同的思想  但是他们叫做repeat 和forever和一些其它的选择 所以同一个思想  不同的术语 实现稍微有点不同 所以这个程序是干嘛的呢? 嗯  main函数  首先声明了一个循环从这里开始 然后在for关键字后面的括号里 有三个部分 每个部分用冒号隔开 最左边的是第一部分 然后第二 第三部分 我们一般看到的这个结构可以这样概括 如果这个帮助我们描绘出一个漂亮的记忆画面 第一个事情是我们叫做的"初始化" 这个代码是 在所有事情发生之前执行的 你可以初始化一个变量  像0用来 计数的或者诸如此类的 "条件  "这个在两个分号的中间 它将迭代地检查这个循环的条件 一旦这个条件或这些条件不成立 整个循环终止 所以不像Scratch  你大致上需要用 "repeat"10次或更多  或者需要不断地使用当它 是死循环时 你们能够指定出一个有限的迭代次数-- 像我15年前学的  有穷的是重要的 所以你们可以指定一个条件来表示有穷的次数 我们等下将看到 最后  更新 这不是一个好事情  如果你只是循环 检查一些条件 但是永远不要改变世界上的国家 如果你不通过增加或减少它来改变一些变量 --如果你不改变什么 大概那个条件永远不会变成错误的 或相反的  所以你将得到一个无限循环 那可能是你的目标  但可能也不是 所以在实践中我们怎么使用它呢? 可能最通常的方法是使用一个 for循环  使i等于0  然后迭代地将i增加到一个特定的值 这样的话  这是非常合理的 使用一个变量"i"  即使 那个表达了很少的信息 或者根据你的目的向下减少 所以这里声明了一个整型数  一个叫做I的整型变量 这个检查"I是不是小于等于100? 如果是  接着执行循环" 我继续循环 我打印"Percent complete" 这个看起来有点凌乱的  但是注意那里嵌入的是 一些类似的东西 %d意思是-- >> 【无法辨认的声音】 >> 大卫:是的  1或更多的数字 "%%"的意思是百分比 所以就像我们采用笨拙的方式来用反斜杠来避免一些东西 在这个背景下对百分号做相同的处理 如果你想要一个百分比常量  就用%% 然后 反斜杠 n 所以这个程序  如果你按照你的直觉 或你们面前的备忘单来执行它 这个程序最终会为我做什么? >> 它将从1开始计数到【听不见的】 >> 大卫:是的  它将从0开始 它将是一种我的 简单的执行进度条 所以让我们继续试验它 此外  它是一个有点乏力的实现 我们将不会再这里等待100秒来等它完成 但是我们使用循环  我们更新一个变量 我们把它排成一个漂亮的格式 所以  最终  100行代码之后 它将100%完成了 因为在那个阶段的没有其它的代码了 这个程序将以一种比较好的方式自然地退出 请说? >> 有一种方法使它完成的百分比 自然地停在那个相同的地方吗? >> 大卫:完全可以 你们能够使百分比在同一个地方停住吗? 因为请注意这最终将是一个问题 所以如果你真的到最后  事物不会以一种完美格式 来排列 结果你可以 你可以在d之前指定一个数字 你也可以在f之前制定一个数字 如果你不用点而只用数字 这个指定的长度是由 你插入的数字决定的 我们将尊重一些网上的文档中的细节 但是简单的答案:是的 它归结于是用一个简单的数字来 修改字符串的格式 所以你们可以做一些对齐 >> 是睡眠【听不见的声音】? >> 大卫:很好的问题 所以睡眠--顾名思义-- 简单地将程序睡眠一秒钟 这样因为我指明了睡眠的一个时间值 sleep函数从哪里来? 嗯  我的确无意掩盖那个细节 在这个程序的顶端  请注意我需要列出 另一个头文件因为sleep没有定义在 CS50函数库中  它没有在 标准输入输出函数库中声明  它显然定义在 uni 标准数据库中-- unistd h 嗯  我到底是怎么知道的呢? 好的  你们在习题集1中看到-- 为了清晰  如果你不想今天从这里 不安地走出去-- 请认识到我们将会手把手地 采用各种各样的步骤教你们做第一个习题集 结果是在一个Linux系统中  这里有这样一个叫做"man"的命令 用来显示指南手册的 你可以看到文档上 有各种各样的函数 所以如果我键入"man sleep"  它将 给我一个叫做sleep程序的用户手册 但是这里有个参考信息  它使问题更清晰 请注意它指明在左上角sleep(1) 结果这个用户手册  就像一个特定名册 有好多章节 第一章大概是关于程序的 所以结果这个有一个sleep程序 就像这个有个叫做Nano的程序 一个叫做GCC的程序--那不是我想要的 我想要一个函数  那是一个小工具 在我程序中可以包含的一行代码 通常这些工具在手册的第二节 或第三节 如果我指定第三个 现在我在那个地方 此外  习题集1将带你通过这个 你将熟悉这些东西 即使第一眼它看起来是比较晦涩的 但长话短说  如果我想要用一个叫做sleep的功能 我作为程序员知道使用那个函数库-- 上面的标题-- 因为在这个小的大纲中它告诉我 我阅读那个文档  照它说的做 那就是我如何便于我的程序的 你们将正确地那样去做  采用 习题集1中的方法 所以让我使它稍微性感一点 所以我将向这些东西所做的挥手 这里的fflush(stdout) (标准输出) 但是我觉得这是个有点无力的实现 一个进度条不应该是打印100行 只是更新它的状态 一般地  我们 想看到一点生机 这次运行这个程序 结果  你可以把光标保持在同一行 并且一次次地更新同一行代码 不用"反斜杠n"  而用 更复古的 "反斜杠r" 它不会把光标移动到下一行  像之前我们所说的 它把光标移动到这行的开头 像一台打印机一样  循环回到开始的地方 所以这里我一次次地在循环中使用printf 但是我逐行地覆盖了我之前所写的东西 因为我写了一个长度相同的字符串-- 我的字符串不会变的更短-- 它生成一个动画幻觉 但是真实地  这个计算机到现在为止 我一次又一次用稍微不同的数字 绘画了相同的字符串 在睡眠1秒钟之后 你说? >> 所以这里有一个斜杠字母命令 来printf  他们可以像 【听不见的】你懂我的意思吗? >> 大卫:好问题 是否有个命令来打印? 没有说的那么简单 你绝对可以实施一些更有用的 和一些更愉快的东西  像我们周三或今天早些时候 看到的  但它不只是 格式化字符串 好的  让我们看一下这里最后一个东西 有改进的最后一个版本 除了像这样的循环之外 你们知道还有while循环 你们什么时候用这种循环  什么是时候用那种呢? 最终  你可以执行这个程序 再使用for循环的地方使用while循环 这只是使你的代码看起来稍微有点不同 可能一周之后  两周之后  为了好玩 你决定重新实现你的Scrtch工程 或者其中一小部分  它将不会是令人惊讶的-- 本来也不应该是--如果你运行相同的游戏 或者是动画 亦或是用完全不同的设置 来运行拼图游戏 我们将看到相同的处理 所以采用while循环  你有一个很像我们之前看到过的 if程序块和else if 程序块的情况 这是一个循环的时候 反复检查的一个条件 但请注意不像for循环  如果你想声明一个变量 或者变大或变小一个变量 你需要自己完成 你不得不在一大段代码之上来实现它 你不得不在一大段代码之内来实现它 负担在你身上 你没有理解for循环的美好的小特征 所以我们可以看到这个 在progress3 c中 这个一个和progress2 c完全相同的程序 这是一个爱好者版本  它用 反斜杠r来把代码移动到行的开始 此外  今天让我忽略fflush 的意思 它解决了一点缺陷  如果我不用它 但是更多的是在以后当你们讨论 文件和创建文件时 请注意我在这里所做的 因为for循环给我提供了为变量准备的占位符 它们在分号之间 现在在while循环中  我没有这些 我必须自己把循环转动起来 所以在程序的顶端我有一个int类型的变量i 我写下我的代码  我休眠一分钟 但是这里  像我们上周看到的  鞋子穿在袜子上 我需要亲自明确地增加这个变量 现在凭感觉  你们喜欢for循环还是while循环 >> For循环 >> 大卫:是的  我很可能投票赞成for循环 它让人感觉更清晰点  但也要看情况 久而久之你们也将看到像你们在Scratch上看到的一样 它们有不同的方式 来实施不同的目的 现在这里还有最后一个循环类型 这种类型的循环 东西变得有点颠倒的 所以那个do while 结构不像其他两个那么有用 我可能很少用do while 循环  但常常是 当编制程序游戏或需要用户输入的程序是 需要检查用户的输入并提醒用户 如果他们干扰了你 或没有提供所期望的输入 现在那个是什么意思? 作为建议的语法  do while循环的不同之处 是这个结构不管怎么样 它会做一些事情 它不先检查条件 先做了点什么  然后它做什么? >> 【听不见的声音】 >> 大卫:然后它检查条件 如果条件成立 然后它回头再处理一次 如果条件不成立  它就在那里中断 所以概念上  则关键的区别是 除了语法看起来有点不同 它的意思是如果你想要一段代码 最初无论如何都要执行 你就可以用do while循环 如果你想要先检查条件 你可以用while循环 让我们在实践中看看这个 我将要打开一个叫做positive1 c的程序 我们翻到这个有趣的部分 它也很短  但先看看 这个是干什么的 这里也有点难看的  这也是为什么我 不太喜欢这个结构  至少在C语言中 但是有时它是必须的 或者它是达到目标最简单的方法 我申明一个变量n 我先不给它赋值 所以我最好小心点 随后我们将看到其中一个细节 特别是当我们讨论安全是: 变量初始化失败  你们知道 通常这个一个不好的行为  因为如果你忘了 如果你写了一个程序是600行而不是6行 使东西保持未知状态只会自找麻烦 因为坏人会利用这些东西来 放入一些 你没有预料到的数据 但是现在让我们看看  如果他是正确的 逻辑上看起来是安全的 因为我知道在那里我做了什么 所以int n只是给我们分配了4个字节 但是它没有放任何东西在那里 所以让我们放点东西在那 做下面的:打印 我要求你给我一个正整数 好的  当我写这个的时候我的语气有点生硬 所以接下来我挑选CS50函数库中的函数GetInt 我用这个值干什么呢? 我把它赋值给n 我把它放回这里 我知道这是正确的因为我不会使用n 直到我给它赋值了 所以它有点冒险但是最终是安全的 因为我没用它做其它的操作 现在我在做什么? 在此时此刻 我现在在检查当n小于1是  我做什么? 这样再三地 所以它感觉可能有点迟缓 执行这段代码" 3 4还是其他数  这个表达式 "是否n小于1"将被评估为错误的 如果输入额是2 3 4或其它的数 所以这个do while 循环在检查的时候 直接中断了 现在如果我和用户有点不和谐 我再次输入"David"  嗯  它将让我重试 还是没有起作用 所以现在它提醒我 用这个版本我们是否可以做些其他的呢? 嗯  让我们看看这个转换  positive2 c 它有点不同 但请注意现在我变得有点兴趣了 并且你可能已经开始在Scratch中开始做这种事情了 随着你们的程序变得越复杂 这里我声明另一个数据类型 布尔值的概念是在布尔先生之后命名的 它是一个正确或错误的概念 这个实际上在C语言本身里是不存在的 我们把它放在CS50 函数库中 我们不久后会撤销那一层 但是在其它语言中  像Java  C++中  都有Bool数据类型 这是一个正确或错误的值 因为我们学习了好的格式风格  我将给那个变量起一个 能使我们联想到它的角色作用  它是满意的或不满意的 我把它初始化为假值 现在我要做什么 我打印出来--这个字符相互覆盖了 因为用的是大字体 我打印:"我需要你给我一个正整数" 我然后这样做了 如果GetInt的返回值比0大 该干什么  用简单的英语说? >> 【听不清的】 >> 大卫:我把thankful改为true值 现在结合有趣的东西-- GetInt返回一个值 显然在这个程序里  我的确没有关心他是什么 我只关心它是大于0的  所以它满足条件 挑选一个函数是完全合法的  返回一个值 用它来做些事情而不是用它与其它的值比较 所以你并不需要使用赋值运算符 你并不需要为它声明一个特定的变量 如果你不关心它的实际值 所以我指明thankful是true值 到这里  我可以使用我们刚才看到的 其它的语法 我想要一直这样做  当我对用户的 数字不满意 换句话说  如果thankful在这时候还是false值 这表示这个条件没有实现地很好 所以我将再次去处理这段代码 现在这个版本是可以证明是更好点的 因为它更清晰一点 它更具有可读性一点 因为我使用了一个bool值 它告诉我或程序员  这是正确的或这是错误的 好的  让我们再捋顺一点 结果用一个bool表达式 你不需要使用等号操作符"=="了 你只要说出你的意思 这个使我们的代码变得更易读  更优雅 更简洁紧凑一点 所以这里的同样的代码--thankful被初始化为false值 我把它打印了 我检查了GetInt的返回值比0大 然后我给thankful赋true值  如果是这样 注意这里有个小技巧 我将一直这样做  当我用满意时-- 感叹号在这里的意思是"非"  这是一个可速记的 有几分机灵优雅的符号 用来说明:"当我不满意  保持这样做" 所以你可以开始表达-- 即使那个语言有点晦涩-- 你的想法可以用同样的方式说出来 所以请允许我把这个放到屏幕上 现在你们可以理解了 非常对不起--我们使你们变成了 能够理解这些的人了 习题集1今晚7:00 将在课程的网站上贴出来 它将非常清晰地带领你们 通过这个星期的挑战 我们下周再见