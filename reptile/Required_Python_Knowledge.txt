Required Python Knowledge\In this {class, we will assume a {basic knowledge of Python {consistent with having taken our previous {courses, An {introduction to {interactive Programming in Python Part 1 and Part 2. Although we'll be using Python 2, starting with a knowledge of Python 3 is fine. The only two {differences from Python 3 that you will probably {notice in Python 2 are printing {(\color{red}{\verb|print "Hello world"|}} instead of {\color{red}{\verb|print("hello world")|})} and integer division {(\color{red}{\verb|11 / 4|}} is \color{red}{\verb|2|}} instead of \color{red}{\verb|2.75|}).\basic} elements of Python\Below is a list of the data types in Python with {which you should be familiar.\• Primitive data types - integers (\color{red}{\verb|int|}),} floating point numbers (\color{red}{\verb|float|}),} strings (\color{red}{\verb|str|}),} Booleans (\color{red}{\verb|bool|}),\•} Built-in {composite data types - lists (\color{red}{\verb|list|}),} tuples (\color{red}{\verb|tuple|}),} {dictionaries (\color{red}{\verb|dict|}),} sets (\color{red}{\verb|set|}),\•} User-defined data types - {objects {created via a \color{red}{\verb|class|}} definition.\You should also be familiar with {creating various types expressions {(arithmetic, Boolean, and string) using both built-in {constants and variables and {capable of {effectively using statements of the following types:\• Simple statements - assignment statements (\color{red}{\verb|=|}),} print statements (\color{red}{\verb|print|}),} return statements (\color{red}{\verb|return|}),} import statements (\color{red}{\verb|import|}),} global statements (\color{red}{\verb|global|}),} pass statements (\color{red}{\verb|pass|}),\•} {compound statement - {conditional statements (\color{red}{\verb|if|},} \color{red}{\verb|elif|},} \color{red}{\verb|else|}),} {function definitions (\color{red}{\verb|def|}),} for loops (\color{red}{\verb|for|}),} while loops (\color{red}{\verb|while|}),} {class definitions (\color{red}{\verb|class|}).\you} should also have some {basic familiarity with {objected-oriented programming. This knowledge need not be {particularly deep. However, we will assume an understanding {sufficient to {create modest-sized {object-oriented programs with one to three {classes. Note that you do not need to be familiar with \color{red}{\verb|simplegui|}} or any other Python GUI module to take this {class.\assessing your knowledge of Python\To determine whether your knowledge of Python is {sufficient to {succeed in this {class, we suggest that you perform two assessments. First, work Homework 1. This homework is designed to test your {basic knowledge of Python as {described above. {since this homework is primarily {concerned with language syntax, we also suggest that you attempt the {practice {mini-project for week 1, Solitaire {mancala, to assess your ability to write short programs. This {practice {mini-project requires you to implement nine methods for a \color{red}{\verb|solitairemancala|}} {class. Eight of the methods should require at most 3-4 lines of Python.\